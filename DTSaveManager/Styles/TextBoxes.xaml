<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="clr-namespace:Microsoft.Xaml.Behaviors;assembly=Microsoft.Xaml.Behaviors"
                    xmlns:controls="clr-namespace:DTSaveManager.Views.Custom_Controls"
                    xmlns:converters="clr-namespace:DTSaveManager.Converters"
                    xmlns:views="clr-namespace:DTSaveManager.Views"
                    xmlns:viewmodels="clr-namespace:DTSaveManager.ViewModels"
                    xmlns:local="clr-namespace:DTSaveManager">

    <converters:BooleanToColorMultiValueConverter x:Key="booleanToColorMultiValueConverter"/>

    <Style x:Key="BaseTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    
    <Style x:Key="BaseEditableLabelTextBox" TargetType="{x:Type controls:EditableLabelTextBox}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="CaretBrush" Value="{DynamicResource TextBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:EditableLabelTextBox}">
                    <Grid Width="Auto">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <TextBox Name="PART_MainTextBox" Opacity="1" HorizontalAlignment="Left" Margin="0 8 0 0" Padding="5 2 0 0" CaretBrush="{DynamicResource TextBrush}" Text="{Binding DisplayName}" Foreground="{DynamicResource TextBrush}">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type TextBox}">
                                                    <Grid Width="Auto">
                                                        <TextBlock HorizontalAlignment="Left" Margin="1 0 0 0" Padding="5 2 0 0" Text="{TemplateBinding Text}" TextTrimming="CharacterEllipsis" Foreground="{DynamicResource TextBrush}"/>
                                                    </Grid>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                        </Border>
                        <TextBox Name="PART_TextBox" CaretBrush="{DynamicResource TextBrush}" HorizontalAlignment="Left" Text="{Binding Value, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type controls:EditableLabelTextBox}}}"
                                 IsEnabled="False" Opacity="0" Margin="6 8 5 6" Padding="3 2 0 0" Foreground="{DynamicResource TextBrush}">

                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TextBox}">
                                                <Grid Width="Auto">
                                                    <ScrollViewer Margin="0 0 0 0" Padding="0 0 0 0" HorizontalAlignment="Left" x:Name="PART_ContentHost"/>
                                                    <Rectangle Name="PART_TextBoxRect" HorizontalAlignment="Left" RadiusX="3" Height="2" Width="{Binding ActualWidth, ElementName=PART_ContentHost}" RadiusY="3" Margin="3 21 0 0" Stroke="{DynamicResource DTScrollBarBrush}" StrokeThickness="2" SnapsToDevicePixels="True"/>
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="LostFocus">
                                <i:InvokeCommandAction Command="{Binding Path=LostFocusCommand, RelativeSource={RelativeSource AncestorType={x:Type controls:EditableLabelTextBox}}}"
                                                           CommandParameter="{Binding Path=LostFocusCommandParameter, RelativeSource={RelativeSource AncestorType={x:Type controls:EditableLabelTextBox}}}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditing" Value="true">
                            <Setter TargetName="PART_TextBox" Property="Opacity" Value="1"/>
                            <Setter TargetName="PART_MainTextBox" Property="Opacity" Value="0"/>
                            <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="True"/>
                        </Trigger>
                        <!--<Trigger Property="IsChecked" Value="False">
                            <Setter Property="Background" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBorderBrush}"/>
                            <Setter Property="Foreground" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBackgroundBrush}"/>
                        </Trigger>-->
                        <!--<Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxForegroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBorderBrush}"/>
                            <Setter Property="Foreground" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxForegroundBrush}"/>
                        </Trigger>-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsEditing}" Value="False"/>
                                <Condition Binding="{Binding Path=Active}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBackgroundHoverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBorderHoverBrush}"/>
                            <Setter Property="Foreground" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBackgroundHoverBrush}"/>-->
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsEditing}" Value="False"/>
                                <Condition Binding="{Binding Path=Active}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBackgroundPressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBorderPressedBrush}"/>
                            <Setter Property="Foreground" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBackgroundPressedBrush}"/>-->
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsEditing}" Value="False"/>
                                <Condition Binding="{Binding Path=Active}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxForegroundHoverBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBorderHoverBrush}"/>
                            <Setter Property="Foreground" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxForegroundHoverBrush}"/>-->
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsEditing}" Value="False"/>
                                <Condition Binding="{Binding Path=Active}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxForegroundPressedBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxBorderPressedBrush}"/>
                            <Setter Property="Foreground" TargetName="PART_RadioButton" Value="{DynamicResource CheckBoxForegroundPressedBrush}"/>-->
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>